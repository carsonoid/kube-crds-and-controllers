/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	podlabeler_v1alpha1 "github.com/carsonoid/kube-crds-and-controllers/controllers/crd-configured/pkg/apis/podlabeler/v1alpha1"
	versioned "github.com/carsonoid/kube-crds-and-controllers/controllers/crd-configured/pkg/client/clientset/versioned"
	internalinterfaces "github.com/carsonoid/kube-crds-and-controllers/controllers/crd-configured/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/carsonoid/kube-crds-and-controllers/controllers/crd-configured/pkg/client/listers/podlabeler/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// PodLabelConfigInformer provides access to a shared informer and lister for
// PodLabelConfigs.
type PodLabelConfigInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.PodLabelConfigLister
}

type podLabelConfigInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewPodLabelConfigInformer constructs a new informer for PodLabelConfig type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPodLabelConfigInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				return client.PodlabelerV1alpha1().PodLabelConfigs(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				return client.PodlabelerV1alpha1().PodLabelConfigs(namespace).Watch(options)
			},
		},
		&podlabeler_v1alpha1.PodLabelConfig{},
		resyncPeriod,
		indexers,
	)
}

func defaultPodLabelConfigInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewPodLabelConfigInformer(client, v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *podLabelConfigInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&podlabeler_v1alpha1.PodLabelConfig{}, defaultPodLabelConfigInformer)
}

func (f *podLabelConfigInformer) Lister() v1alpha1.PodLabelConfigLister {
	return v1alpha1.NewPodLabelConfigLister(f.Informer().GetIndexer())
}

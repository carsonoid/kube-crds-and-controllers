/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1alpha1

import (
	provisioner_v1alpha1 "github.com/carsonoid/kube-crds-and-controllers/controllers/workshop-provisioner/pkg/apis/provisioner/v1alpha1"
	versioned "github.com/carsonoid/kube-crds-and-controllers/controllers/workshop-provisioner/pkg/client/clientset/versioned"
	internalinterfaces "github.com/carsonoid/kube-crds-and-controllers/controllers/workshop-provisioner/pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/carsonoid/kube-crds-and-controllers/controllers/workshop-provisioner/pkg/client/listers/provisioner/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// WorkshopAttendeeInformer provides access to a shared informer and lister for
// WorkshopAttendees.
type WorkshopAttendeeInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.WorkshopAttendeeLister
}

type workshopAttendeeInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewWorkshopAttendeeInformer constructs a new informer for WorkshopAttendee type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkshopAttendeeInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				return client.ProvisionerV1alpha1().WorkshopAttendees().List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				return client.ProvisionerV1alpha1().WorkshopAttendees().Watch(options)
			},
		},
		&provisioner_v1alpha1.WorkshopAttendee{},
		resyncPeriod,
		indexers,
	)
}

func defaultWorkshopAttendeeInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewWorkshopAttendeeInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *workshopAttendeeInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&provisioner_v1alpha1.WorkshopAttendee{}, defaultWorkshopAttendeeInformer)
}

func (f *workshopAttendeeInformer) Lister() v1alpha1.WorkshopAttendeeLister {
	return v1alpha1.NewWorkshopAttendeeLister(f.Informer().GetIndexer())
}
